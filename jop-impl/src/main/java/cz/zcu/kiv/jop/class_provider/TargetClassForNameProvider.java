package cz.zcu.kiv.jop.class_provider;

import javax.inject.Singleton;

import cz.zcu.kiv.jop.annotation.class_provider.RandomClassForName;
import cz.zcu.kiv.jop.annotation.class_provider.TargetClassForName;
import cz.zcu.kiv.jop.generator.ValueGeneratorException;
import cz.zcu.kiv.jop.generator.clazz.RandomClassForNameGenerator;
import cz.zcu.kiv.jop.generator.clazz.TargetClassForNameGenerator;

/**
 * Implementation of class provider for annotation {@link RandomClassForName} which uses
 * {@link RandomClassForNameGenerator} for providing classes.
 *
 * @author Mr.FrAnTA
 * @since 1.0.0
 */
@Singleton
public class TargetClassForNameProvider extends TargetClassForNameGenerator implements ClassProvider<TargetClassForName> {

  /**
   * This method provides the class type generated by method {@link #getValue} of random class
   * generator.
   *
   * @param params parameters of class provider.
   * @return Class type generated by random class generator.
   * @throws ClassProviderException If generating of provided class by random class generator throws
   *           exception because of incorrect parameters or because of some problem during
   *           generating.
   */
  public Class<?> get(TargetClassForName params) throws ClassProviderException {
    try {
      return getValue(params);
    }
    catch (ValueGeneratorException exc) {
      throw new ClassProviderException(exc.getMessage());
    }
  }
}
